# Generated by Django 3.1.7 on 2021-05-30 16:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import rooms.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=15, verbose_name='Имя')),
                ('surname', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('login', models.CharField(max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Недопустимые символы, доступны только буквы латиницы, цифры, - и _.', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Имя пользователя')),
                ('password', models.CharField(max_length=64, null=True, verbose_name='Пароль')),
                ('email', models.CharField(max_length=60, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone_number', models.CharField(max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='Проверьте правильность номера. Номер должен начинаться с + и состоять из цифр.', regex='^\\+?[0-9]{3}-?[0-9]{6,12}$')], verbose_name='Номер телефона')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Менеджер')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
            managers=[
                ('objects', rooms.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15, verbose_name='Имя')),
                ('surname', models.CharField(max_length=30, verbose_name='Фамилия')),
                ('email', models.CharField(max_length=60, validators=[django.core.validators.EmailValidator()], verbose_name='Email')),
                ('phone_number', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Проверьте правильность номера. Номер должен начинаться с + и состоять из цифр.', regex='^\\+?[0-9]{3}-?[0-9]{6,12}$')], verbose_name='Номер телефона')),
            ],
            options={
                'verbose_name': 'гость',
                'verbose_name_plural': 'гости',
            },
        ),
        migrations.CreateModel(
            name='NotificationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'статус оповещения',
                'verbose_name_plural': 'статусы оповещения',
            },
        ),
        migrations.CreateModel(
            name='RequestReservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('arrival_date', models.DateField(verbose_name='Дата заезда')),
                ('departure_date', models.DateField(verbose_name='Дата выезда')),
                ('guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='rooms.guest', verbose_name='Гость')),
            ],
            options={
                'verbose_name': 'заказ/бронирование',
                'verbose_name_plural': 'заказы/бронирования',
            },
        ),
        migrations.CreateModel(
            name='RequestReservationStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True, verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'статус бронирования',
                'verbose_name_plural': 'статусы бронирования',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название')),
                ('description', models.TextField(verbose_name='Описание')),
                ('price', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Цена')),
                ('exists', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Всего номеров')),
                ('adult_capacity', models.PositiveIntegerField(verbose_name='Вместительность взрослых')),
                ('child_capacity', models.PositiveIntegerField(verbose_name='Вместительность детей')),
                ('area', models.FloatField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Площадь')),
            ],
            options={
                'verbose_name': 'комната',
                'verbose_name_plural': 'комнаты',
            },
        ),
        migrations.CreateModel(
            name='RoomImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='images', to='rooms.room')),
            ],
        ),
        migrations.CreateModel(
            name='ReservationStatusLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when_changed', models.DateTimeField(auto_now_add=True, verbose_name='Дата изменения')),
                ('new_status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.requestreservationstatus', verbose_name='Новый статус')),
                ('request_reservation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.requestreservation', verbose_name='Бронирование')),
            ],
            options={
                'verbose_name': 'изменение статуса',
                'verbose_name_plural': 'изменения статуса',
            },
        ),
        migrations.AddField(
            model_name='requestreservation',
            name='room',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.room', verbose_name='Комната'),
        ),
        migrations.AddField(
            model_name='requestreservation',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.requestreservationstatus', verbose_name='Статус'),
        ),
        migrations.AddField(
            model_name='requestreservation',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Клиент'),
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt', models.FileField(upload_to='receipts/', verbose_name='Квитанция')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.requestreservation', verbose_name='Бронирование')),
            ],
            options={
                'verbose_name': 'квитанция',
                'verbose_name_plural': 'квитанции',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=80, verbose_name='Текст уведомления')),
                ('request_reservation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.requestreservation', verbose_name='Бронирование')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='rooms.notificationstatus', verbose_name='Статус')),
            ],
            options={
                'verbose_name': 'оповещение',
                'verbose_name_plural': 'оповещения',
            },
        ),
    ]
